<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://laravel-workflow.com/blog</id>
    <title>Laravel Workflow Blog</title>
    <updated>2022-11-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://laravel-workflow.com/blog"/>
    <subtitle>Laravel Workflow Blog</subtitle>
    <icon>https://laravel-workflow.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Invalidating Cloud Images in Laravel with Workflows]]></title>
        <id>invalidating-cloud-images</id>
        <link href="https://laravel-workflow.com/blog/invalidating-cloud-images"/>
        <updated>2022-11-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Many services like Cloud Image offer a way to invalidate cached images so that they are pulled from your server again. This is useful if you have updated the source image on your server and want future requests to use the latest copy.]]></summary>
        <content type="html"><![CDATA[<p>Many services like <a href="https://docs.cloudimage.io/go/cloudimage-documentation-v7/en/caching-acceleration/invalidation-api" target="_blank" rel="noopener noreferrer">Cloud Image</a> offer a way to invalidate cached images so that they are pulled from your server again. This is useful if you have updated the source image on your server and want future requests to use the latest copy.</p><p>However, it can be challenging if you want to automate this and also ensure that the image has been invalidated. This is because most invalidation APIs are asynchronous. When you request an image to be cleared from the cache, the API will return a response immediately. Then the actual process to clear the image from the cache runs in the background, sometimes taking up to 30 seconds before the image is updated. You could simply trust that the process works but it is also possible to be 100% sure with an automated workflow.</p><blockquote><p>This article is part of a series on <a href="https://github.com/laravel-workflow/laravel-workflow" target="_blank" rel="noopener noreferrer">Larvel Workflow</a>, a durable workflow engine that allows users to write long running persistent distributed workflows (orchestrations) in PHP powered by Laravel Queues. Inspired by Temporal and Azure Durable Functions.</p></blockquote><p>The workflow we need to write is as follows:</p><ol><li>Check the currently cached image’s timestamp via HEAD call</li><li>Invalidate cached image via API call</li><li>Check if the image timestamp has changed</li><li>If not, wait a while and check again</li><li>After 3 failed checks, go back to step 2</li></ol><p>The workflow consists of two activities. The first activity gets the current timestamp of the image. This timestamp is used to determine if the image was actually cleared from the cache or not.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\InvalidateCache;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\Http;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Activity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class CheckImageDateActivity extends Activity</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($url)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return Http::head('https://' . config('services.cloudimage.token') . '.cloudimg.io/' . $url)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            -&gt;header('date');</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The second activity makes the actual call to Cloud Image’s API to invalidate the image from the cache.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\InvalidateCache;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\Http;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Activity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class InvalidateCacheActivity extends Activity</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($url)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Http::withHeaders([</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            'X-Client-key' =&gt; config('services.cloudimage.key'),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            'Content-Type' =&gt; 'application/json'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ])-&gt;post('https://api.cloudimage.com/invalidate', [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            'scope' =&gt; 'original',</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            'urls' =&gt; [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                '/' . $url</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            ],</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ]);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The workflow looks as follows and is the same process as outlined before.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\InvalidateCache;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\ActivityStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Workflow;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\WorkflowStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class InvalidateCacheWorkflow extends Workflow</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($url)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $oldDate = yield ActivityStub::make(CheckImageDateActivity::class, $url);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        while (true) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            yield ActivityStub::make(InvalidateCacheActivity::class, $url);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            for ($i = 0; $i &lt; 3; ++$i) { </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                yield WorkflowStub::timer(30);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                $newDate = yield ActivityStub::make(CheckImageDateActivity::class, $url);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                if ($oldDate !== $newDate) return;    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Line 13 uses an activity to get the current timestamp of the image we want to invalidate from the cache.</p><p>Line 15 starts a loop that only exits when the image timestamp has changed.</p><p>Line 16 uses an activity to invalidate the image from the cache.</p><p>Line 18 starts a loop that tries a maximum of three times to first sleep and then check if the image timestamp has change, after three times the loop restarts at line 15.</p><p>Line 19 sleeps the workflow for 30 seconds. This gives Cloud Image time to clear the image from their cache before checking the timestamp again.</p><p>Lines 21–23 reuse the activity from earlier to get the current timestamp of the cached image and compare it to the one saved on line 13. If the timestamps don’t match then the image has successfully been cleared from the cache and we can exit the workflow. Otherwise, after three attempts, we start the process over again.</p><p>This is how the workflow execution looks in the queue assuming no retries are needed.</p><p><img loading="lazy" src="https://miro.medium.com/max/1400/1*7psZLD9mKGJnzEw508oIAw.webp" alt="workflow execution" class="img_ev3q"></p><p>The added benefit is that your image is now cached again and will be fast for the next user! Thanks for reading!</p>]]></content>
        <author>
            <name>Richard</name>
            <uri>https://github.com/rmcdaniel</uri>
        </author>
        <category label="cache" term="cache"/>
        <category label="invalidation" term="invalidation"/>
        <category label="cloud" term="cloud"/>
        <category label="images" term="images"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Converting Videos with FFmpeg and Laravel Workflow]]></title>
        <id>converting-videos-with-ffmpeg</id>
        <link href="https://laravel-workflow.com/blog/converting-videos-with-ffmpeg"/>
        <updated>2022-10-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[FFmpeg is a free, open-source software project allowing you to record, convert and stream audio and video.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://ffmpeg.org/" target="_blank" rel="noopener noreferrer">FFmpeg</a> is a free, open-source software project allowing you to record, convert and stream audio and video.</p><p><a href="https://laravel.com/docs/9.x/queues" target="_blank" rel="noopener noreferrer">Laravel Queues</a> are great for long running tasks. Converting video takes a long time! With <a href="https://github.com/laravel-workflow/laravel-workflow" target="_blank" rel="noopener noreferrer">Laravel Workflow</a>, you can harness the power of queues to convert videos in the background and easily manage the process.</p><h1>Requirements</h1><ol><li>You’ll need to <a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener noreferrer">install FFmpeg</a></li><li>Then <code>composer require php-ffmpeg/php-ffmpeg</code> (<a href="https://github.com/PHP-FFMpeg/PHP-FFMpeg#readme" target="_blank" rel="noopener noreferrer">docs</a>)</li><li>Finally <code>composer require laravel-workflow/laravel-workflow</code> (<a href="https://github.com/laravel-workflow/laravel-workflow#laravel-workflow-" target="_blank" rel="noopener noreferrer">docs</a>)</li></ol><h1>Workflow</h1><p>A workflow is an easy way to orchestrate activities. A workflow that converts a video from one format to another might have several activities, such as downloading the video from storage, the actual conversion, and then finally notifying the user that it’s finished.</p><p>For simplicity, the workflow we are making today will only contain the most interesting activity, converting the video.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\ConvertVideo;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\ActivityStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Workflow;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class ConvertVideoWorkflow extends Workflow</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        yield ActivityStub::make(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            ConvertVideoWebmActivity::class,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            storage_path('app/oceans.mp4'),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            storage_path('app/oceans.webm'),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We need a video to convert. We can use this one:</p><p><a href="http://vjs.zencdn.net/v/oceans.mp4" target="_blank" rel="noopener noreferrer">http://vjs.zencdn.net/v/oceans.mp4</a></p><p>Download it and save it to your app storage folder.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\ConvertVideo;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use FFMpeg\FFMpeg;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use FFMpeg\Format\Video\WebM;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Activity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class ConvertVideoWebmActivity extends Activity</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public $timeout = 5;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($input, $output)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $ffmpeg = FFMpeg::create();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $video = $ffmpeg-&gt;open($input);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $format = new WebM();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $format-&gt;on('progress', fn () =&gt; $this-&gt;heartbeat());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $video-&gt;save($format, $output);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The activity converts any input video into a <a href="https://www.webmproject.org/" target="_blank" rel="noopener noreferrer">WebM</a> output video. While ffmpeg is converting the video, a progress callback is triggered which in turn heartbeats the activity.</p><p>This is necessary because we have set a reasonable timeout of 5 seconds but we also have no idea how long it will take to convert the video. As long as we send a heartbeat at least once every 5 seconds, the activity will not timeout.</p><p><img loading="lazy" src="https://miro.medium.com/max/1400/1*ccrxeOEZYQciDYEprRKWiQ.webp" alt="heartbeat" class="img_ev3q"></p><p><img loading="lazy" src="https://miro.medium.com/max/1400/1*9ZF3LTqjf4qsVcNVX5LK0A.webp" alt="no heartbeat" class="img_ev3q"></p><p>Without a heartbeat, the worker will be killed after the timeout of 5 seconds is reached.</p><p>To actually run the workflow you just need to call:</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">WorkflowStub::make(ConvertVideoWorkflow::class)-&gt;start();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And that’s it!</p>]]></content>
        <author>
            <name>Richard</name>
            <uri>https://github.com/rmcdaniel</uri>
        </author>
        <category label="video" term="video"/>
        <category label="ffmpeg" term="ffmpeg"/>
        <category label="conversion" term="conversion"/>
        <category label="transcoding" term="transcoding"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Email Verifications Using Laravel Workflow]]></title>
        <id>email-verifications</id>
        <link href="https://laravel-workflow.com/blog/email-verifications"/>
        <updated>2022-10-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A typical registration process goes as follows:]]></summary>
        <content type="html"><![CDATA[<p>A typical registration process goes as follows:</p><ol><li>User fills out registration form and submits it</li><li>Laravel creates user in database with null <code>email_verified_at</code></li><li>Laravel sends email with a code, or a link back to our website</li><li>User enters code, or clicks link</li><li>Laravel sets <code>email_verified_at</code> to the current time</li></ol><p>What’s wrong with this? Nothing. But like all things, as soon as real world complexity creeps in, this pattern could become painful. What if you wanted to send an email after the code or link expires? And do you really need a user in your database if they never verify their email address?</p><p>Let’s take this trivial example and replace it with a workflow. This is based on the <a href="https://github.com/laravel-workflow/laravel-workflow" target="_blank" rel="noopener noreferrer">Laravel Workflow</a> library.</p><h1>Get Started</h1><p>Create a standard Laravel application and create the following files. First, the API routes.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">use App\Workflows\VerifyEmail\VerifyEmailWorkflow;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\Hash;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\Route;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\WorkflowStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Route::get('/register', function () {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    $workflow = WorkflowStub::make(VerifyEmailWorkflow::class);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    $workflow-&gt;start(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        'test+1@example.com',</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Hash::make('password'),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    return response()-&gt;json([</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        'workflow_id' =&gt; $workflow-&gt;id(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ]);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">});</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Route::get('/verify-email', function () {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    $workflow = WorkflowStub::load(request('workflow_id'));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    $workflow-&gt;verify();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    return response()-&gt;json('ok');</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">})-&gt;name('verify-email');</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The <code>register</code> route creates a new <code>VerifyEmailWorkflow</code> , passes in the email and password, and then starts the workflow. Notice that we hash the password before giving it to the workflow. This prevents the plain text from being stored in the workflow logs.</p><p>The <code>verify-email</code> route receives a workflow id, loads it and then calls the <code>verify()</code> signal method.</p><p>Now let’s take a look at the actual workflow.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\ActivityStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\SignalMethod;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Workflow;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\WorkflowStub;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class VerifyEmailWorkflow extends Workflow</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private bool $verified = false;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    #[SignalMethod]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function verify()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $this-&gt;verified = true;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($email = '', $password = '')</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        yield ActivityStub::make(SendEmailVerificationEmailActivity::class, $email);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        yield WorkflowStub::await(fn () =&gt; $this-&gt;verified);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        yield ActivityStub::make(VerifyEmailActivity::class, $email, $password);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Take notice of the <code>yield</code> keywords. Because PHP (and most other languages) cannot save their execution state, coroutines rather than normal functions are used inside of workflows (but not activities). A coroutine will be called multiple times in order to execute to completion.</p><p><img loading="lazy" src="https://miro.medium.com/max/1400/1*6eE2Gll61IbAAU85Md75OQ.webp" alt="graph" class="img_ev3q"></p><p>Even though this workflow will execute to completion effectively once, it will still be partially executed four different times. The results of activities are cached so that only failed activities will be called again. Successful activities get skipped.</p><p>But notice that any code we write between these calls will be called multiple times. That’s why your code needs to be <strong>deterministic</strong> inside of workflow methods! If your code has four executions, each at different times, they must still all behave the same. There are no such limitations within activity methods.</p><h1>Step By Step</h1><p>The first time the workflow executes, it will reach the call to <code>SendEmailVerificationEmailActivity</code> , start that activity, and then exit. Workflows suspend execution while an activity is running. After the <code>SendEmailVerificationEmailActivity</code> finishes, it will resume execution of the workflow. This brings us to…</p><p>The second time the workflow is executed, it will reach the call to <code>SendEmailVerificationEmailActivity</code> and skip it because it will already have the result of that activity. Then it will reach the call to <code>WorkflowStub::await()</code> which allows the workflow to wait for an external signal. In this case, it will come from the user clicking on the verification link they receive in their email. Once the workflow is signaled then it will execute for…</p><p>The third time, both the calls to <code>SendEmailVerificationEmailActivity</code> and <code>WorkflowStub::await()</code> are skipped. This means that the <code>VerifyEmailActivity</code> will be started. After the final activity has executed we still have…</p><p>The final time the workflow is called, there is nothing left to do so the workflow completes.</p><p>Now let’s take a look at the activities.</p><p>The first activity just sends the user an email.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\VerifyEmail;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use App\Mail\VerifyEmail;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\Mail;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Activity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class SendEmailVerificationEmailActivity extends Activity</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($email)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Mail::to($email)-&gt;send(new VerifyEmail($this-&gt;workflowId()));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The email contains a temporary signed URL that includes the workflow ID.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Mail;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Bus\Queueable;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Mail\Mailable;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Mail\Mailables\Content;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Mail\Mailables\Envelope;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Queue\SerializesModels;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Illuminate\Support\Facades\URL;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class VerifyEmail extends Mailable</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    use Queueable, SerializesModels;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private $workflowId;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function __construct($workflowId)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $this-&gt;workflowId = $workflowId;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function envelope()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new Envelope(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            subject: 'Verify Email',</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function content()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new Content(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            view: 'emails.verify-email',</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            with: [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                'url' =&gt; URL::temporarySignedRoute(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    'verify-email',</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    now()-&gt;addMinutes(30),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    ['workflow_id' =&gt; $this-&gt;workflowId],</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                ),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            ],</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function attachments()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return [];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The user gets the URL in a clickable link.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">&lt;a href="{{ $url }}"&gt;verification link&lt;/a&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This link takes the user to the <code>verify-email</code> route from our API routes, which will then start the final activity.</p><div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">namespace App\Workflows\VerifyEmail;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use App\Models\User;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">use Workflow\Activity;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">class VerifyEmailActivity extends Activity</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public function execute($email, $password)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user = new User();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user-&gt;name = '';</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user-&gt;email = $email;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user-&gt;email_verified_at = now();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user-&gt;password = $password;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $user-&gt;save();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We have created the user and verified their email address at the same time. Neat!</p><h1>Wrapping Up</h1><p>If we take a look at the output of <code>php artisan queue:work</code> we can better see how the workflow and individual activities are interleaved.</p><p><img loading="lazy" src="https://miro.medium.com/max/1400/1*q6-r41SN-uWfzp6p7Z4r8g.webp" alt="queue worker" class="img_ev3q"></p><p>We can see the four different executions of the workflow, the individual activities and the signal we sent.</p><p>The <a href="https://github.com/laravel-workflow/laravel-workflow" target="_blank" rel="noopener noreferrer">Laravel Workflow</a> library is heavily inspired by <a href="https://temporal.io/" target="_blank" rel="noopener noreferrer">Temporal</a> but powered by <a href="https://laravel.com/docs/9.x/queues" target="_blank" rel="noopener noreferrer">Laravel Queues</a>.</p><p>Thanks for reading!</p>]]></content>
        <author>
            <name>Richard</name>
            <uri>https://github.com/rmcdaniel</uri>
        </author>
        <category label="emails" term="emails"/>
        <category label="verification" term="verification"/>
        <category label="signed-urls" term="signed-urls"/>
    </entry>
</feed>