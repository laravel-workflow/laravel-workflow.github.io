"use strict";(self.webpackChunklaravel_workflow=self.webpackChunklaravel_workflow||[]).push([[1938],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},297:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:8},i="Sagas",s={unversionedId:"features/sagas",id:"features/sagas",title:"Sagas",description:"Sagas are an established design pattern for managing complex, long-running operations:",source:"@site/docs/features/sagas.md",sourceDirName:"features",slug:"/features/sagas",permalink:"/docs/features/sagas",draft:!1,editUrl:"https://github.com/laravel-workflow/laravel-workflow.github.io/edit/main/docs/features/sagas.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Child Workflows",permalink:"/docs/features/child-workflows"},next:{title:"Heartbeats",permalink:"/docs/features/heartbeats"}},l={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sagas"},"Sagas"),(0,r.kt)("p",null,"Sagas are an established design pattern for managing complex, long-running operations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A saga manages distributed transactions using a sequence of local transactions."),(0,r.kt)("li",{parentName:"ul"},"A local transaction is a work unit performed by a saga participant (an activity)."),(0,r.kt)("li",{parentName:"ul"},"Each operation in the saga can be reversed by a compensatory activity."),(0,r.kt)("li",{parentName:"ul"},"The saga pattern assures that all operations are either completed successfully or the corresponding compensation activities are run to undo any completed work.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\n\nclass BookingSagaWorkflow extends Workflow\n{\n    public function execute()\n    {\n        try {\n            $flightId = yield ActivityStub::make(BookFlightActivity::class);\n            $this->addCompensation(fn () => ActivityStub::make(CancelFlightActivity::class, $flightId));\n\n            $hotelId = yield ActivityStub::make(BookHotelActivity::class);\n            $this->addCompensation(fn () => ActivityStub::make(CancelHotelActivity::class, $hotelId));\n\n            $carId = yield ActivityStub::make(BookRentalCarActivity::class);\n            $this->addCompensation(fn () => ActivityStub::make(CancelRentalCarActivity::class, $carId));\n        } catch (Throwable $th) {\n            yield from $this->compensate();\n            throw $th;\n        }\n    }\n}\n")),(0,r.kt)("p",null,"By default, compensations execute sequentially in the reverse order they were added. To run them in parallel, use ",(0,r.kt)("inlineCode",{parentName:"p"},"$this->setParallelCompensation(true)"),". To ignore exceptions that occur inside compensation activities while still running them sequentially, use ",(0,r.kt)("inlineCode",{parentName:"p"},"$this->setContinueWithError(true)")," instead."))}p.isMDXComponent=!0}}]);