"use strict";(self.webpackChunklaravel_workflow=self.webpackChunklaravel_workflow||[]).push([[3901],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),f=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=f(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=f(r),d=o,u=p["".concat(s,".").concat(d)]||p[d]||w[d]||i;return r?n.createElement(u,a(a({ref:t},c),{},{components:r})):n.createElement(u,a({ref:t},c))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var f=2;f<i;f++)a[f]=r[f];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4464:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>f});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:1},a="Workflows",l={unversionedId:"defining-workflows/workflows",id:"defining-workflows/workflows",title:"Workflows",description:"In Laravel Workflow, workflows and activities are defined as classes that extend the base Workflow and Activity classes provided by the framework.",source:"@site/docs/defining-workflows/workflows.md",sourceDirName:"defining-workflows",slug:"/defining-workflows/workflows",permalink:"/docs/defining-workflows/workflows",draft:!1,editUrl:"https://github.com/laravel-workflow/laravel-workflow.github.io/blob/main/docs/defining-workflows/workflows.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Defining Workflows",permalink:"/docs/category/defining-workflows"},next:{title:"Activities",permalink:"/docs/defining-workflows/activities"}},s={},f=[],c={toc:f};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"workflows"},"Workflows"),(0,o.kt)("p",null,"In Laravel Workflow, workflows and activities are defined as classes that extend the base ",(0,o.kt)("inlineCode",{parentName:"p"},"Workflow")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Activity")," classes provided by the framework."),(0,o.kt)("p",null,"A workflow is a class that defines a sequence of activities that run in parallel, series or a mixture of both. It is defined by extending the ",(0,o.kt)("inlineCode",{parentName:"p"},"Workflow")," class and implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\n\nclass MyWorkflow extends Workflow\n{\n    public function execute()\n    {\n        $result = yield ActivityStub::make(MyActivity::class);\n\n        return $result;\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," keyword is used to pause the execution of the workflow and wait for the completion of an activity."))}p.isMDXComponent=!0}}]);