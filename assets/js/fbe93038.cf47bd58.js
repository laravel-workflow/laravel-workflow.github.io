"use strict";(self.webpackChunklaravel_workflow=self.webpackChunklaravel_workflow||[]).push([[8432],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>w});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,w=p["".concat(s,".").concat(f)]||p[f]||k[f]||i;return n?r.createElement(w,l(l({ref:t},c),{},{components:n})):r.createElement(w,l({ref:t},c))}));function w(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,l[1]=a;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:7},l="Testing",a={unversionedId:"testing",id:"testing",title:"Testing",description:"Workflows",source:"@site/docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/testing",draft:!1,editUrl:"https://github.com/laravel-workflow/laravel-workflow.github.io/edit/main/docs/testing.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Constraints Summary",permalink:"/docs/constraints/constraints-summary"},next:{title:"Failures and Recovery",permalink:"/docs/failures-and-recovery"}},s={},u=[{value:"Workflows",id:"workflows",level:2},{value:"Skipping Time",id:"skipping-time",level:2},{value:"Activities",id:"activities",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("h2",{id:"workflows"},"Workflows"),(0,o.kt)("p",null,"You can execute workflows synchronously in your test environment and mock activities to define expected behaviors and outputs without running the actual implementations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\n\nclass MyWorkflow extends Workflow\n{\n    public function execute()\n    {\n        $result = yield ActivityStub::make(MyActivity::class);\n\n        return $result;\n    }\n}\n")),(0,o.kt)("p",null,"The above workflow can be tested by first calling ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkflowStub::fake()")," and then mocking the activity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public function testWorkflow()\n{\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(MyActivity::class, 'result');\n\n    $workflow = WorkflowStub::make(MyWorkflow::class);\n    $workflow->start();\n\n    $this->assertSame($workflow->output(), 'result');\n}\n")),(0,o.kt)("p",null,"You can also provide a callback instead of a result value to ",(0,o.kt)("inlineCode",{parentName:"p"}," WorkflowStub::mock()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public function testWorkflow()\n{\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(MyActivity::class, function ($context) {\n        return 'result';\n    });\n\n    $workflow = WorkflowStub::make(MyWorkflow::class);\n    $workflow->start();\n\n    $this->assertSame($workflow->output(), 'result');\n}\n")),(0,o.kt)("p",null,"The workflow ",(0,o.kt)("inlineCode",{parentName:"p"},"$context")," along with any arguments for the current activity will also be passed to the callback."),(0,o.kt)("h2",{id:"skipping-time"},"Skipping Time"),(0,o.kt)("p",null,"By manipulating the system time with ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->travel()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->travelTo()"),", you can simulate time-dependent workflows. This strategy allows you to test timeouts, delays, and other time-sensitive logic within your workflows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\nuse Workflow\\WorkflowStub;\n\nclass MyTimerWorkflow extends Workflow\n{\n    public function execute()\n    {\n        yield WorkflowStub::timer(60);\n\n        $result = yield ActivityStub::make(MyActivity::class);\n\n        return $result;\n    }\n}\n")),(0,o.kt)("p",null,"The above workflow waits 60 seconds before executing the activity. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->travel()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"$workflow->resume()")," allows us to skip this waiting period."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public function testTimeTravelWorkflow()\n{\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(MyActivity::class, 'result');\n\n    $workflow = WorkflowStub::make(MyTimerWorkflow::class);\n    $workflow->start();\n\n    $this->travel(120)->seconds();\n\n    $workflow->resume();\n\n    $this->assertSame($workflow->output(), 'result');\n}\n")),(0,o.kt)("p",null,"The helpers ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->travel()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->travelTo()")," methods use ",(0,o.kt)("inlineCode",{parentName:"p"},"Carbon:setTestNow()")," under the hood."),(0,o.kt)("h2",{id:"activities"},"Activities"),(0,o.kt)("p",null,"Testing activities is similar to testing Laravel jobs. You manually create the activity and then call the ",(0,o.kt)("inlineCode",{parentName:"p"},"handle()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$workflow = WorkflowStub::make(MyWorkflow::class);\n\n$activity = new MyActivity(0, now()->toDateTimeString(), StoredWorkflow::findOrFail($workflow->id()));\n\n$result = $activity->handle();\n")),(0,o.kt)("p",null,"Note that we call the handle method and not the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute()")," method."))}p.isMDXComponent=!0}}]);