"use strict";(self.webpackChunklaravel_workflow=self.webpackChunklaravel_workflow||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/introduction","docId":"introduction"},{"type":"link","label":"Installation","href":"/docs/installation","docId":"installation"},{"type":"category","label":"Defining Workflows","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Workflows","href":"/docs/defining-workflows/workflows","docId":"defining-workflows/workflows"},{"type":"link","label":"Activities","href":"/docs/defining-workflows/activities","docId":"defining-workflows/activities"},{"type":"link","label":"Starting Workflows","href":"/docs/defining-workflows/starting-workflows","docId":"defining-workflows/starting-workflows"},{"type":"link","label":"Workflow Status","href":"/docs/defining-workflows/workflow-status","docId":"defining-workflows/workflow-status"},{"type":"link","label":"Workflow ID","href":"/docs/defining-workflows/workflow-id","docId":"defining-workflows/workflow-id"},{"type":"link","label":"Passing Data","href":"/docs/defining-workflows/passing-data","docId":"defining-workflows/passing-data"}],"href":"/docs/category/defining-workflows"},{"type":"category","label":"Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Signals","href":"/docs/features/signals","docId":"features/signals"},{"type":"link","label":"Queries","href":"/docs/features/queries","docId":"features/queries"},{"type":"link","label":"Timers","href":"/docs/features/timers","docId":"features/timers"},{"type":"link","label":"Signal + Timer","href":"/docs/features/signal+timer","docId":"features/signal+timer"},{"type":"link","label":"Heartbeats","href":"/docs/features/heartbeats","docId":"features/heartbeats"},{"type":"link","label":"Side Effects","href":"/docs/features/side-effects","docId":"features/side-effects"},{"type":"link","label":"Child Workflows","href":"/docs/features/child-workflows","docId":"features/child-workflows"},{"type":"link","label":"Concurrency","href":"/docs/features/concurrency","docId":"features/concurrency"},{"type":"link","label":"Sagas","href":"/docs/features/sagas","docId":"features/sagas"}],"href":"/docs/category/features"},{"type":"category","label":"Configuration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Publishing Config","href":"/docs/configuration/publishing-config","docId":"configuration/publishing-config"},{"type":"link","label":"Options","href":"/docs/configuration/options","docId":"configuration/options"},{"type":"link","label":"Ensuring Same Server","href":"/docs/configuration/ensuring-same-server","docId":"configuration/ensuring-same-server"},{"type":"link","label":"Database Connection","href":"/docs/configuration/database-connection","docId":"configuration/database-connection"},{"type":"link","label":"Microservices","href":"/docs/configuration/microservices","docId":"configuration/microservices"}],"href":"/docs/category/configuration"},{"type":"link","label":"Failures and Recovery","href":"/docs/failures-and-recovery","docId":"failures-and-recovery"},{"type":"category","label":"Constraints","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/constraints/overview","docId":"constraints/overview"},{"type":"link","label":"Workflow Constraints","href":"/docs/constraints/workflow-constraints","docId":"constraints/workflow-constraints"},{"type":"link","label":"Activity Constraints","href":"/docs/constraints/activity-constraints","docId":"constraints/activity-constraints"},{"type":"link","label":"Constraints Summary","href":"/docs/constraints/constraints-summary","docId":"constraints/constraints-summary"}],"href":"/docs/category/constraints"},{"type":"link","label":"How It Works","href":"/docs/how-it-works","docId":"how-it-works"},{"type":"link","label":"Monitoring","href":"/docs/monitoring","docId":"monitoring"}]},"docs":{"configuration/database-connection":{"id":"configuration/database-connection","title":"Database Connection","description":"Here is an overview of the steps needed to customize the database connection used for the stored workflow models. This is only required if you want to use a different database connection than the default connection you specified for your Laravel application.","sidebar":"tutorialSidebar"},"configuration/ensuring-same-server":{"id":"configuration/ensuring-same-server","title":"Ensuring Same Server","description":"To ensure that your activities run on the same server so that they can share data using the local file system, you can use the $queue property on your workflow and activity classes. Set the $queue property to the name of a dedicated queue that is only processed by the desired server.","sidebar":"tutorialSidebar"},"configuration/microservices":{"id":"configuration/microservices","title":"Microservices","description":"Workflows can span across multiple Laravel applications. For instance, a workflow might exist in one microservice while its corresponding activity resides in another.","sidebar":"tutorialSidebar"},"configuration/options":{"id":"configuration/options","title":"Options","description":"Laravel Workflow allows you to specify various options when defining your workflows and activities. These options include the number of times a workflow or activity may be attempted before it fails, the connection and queue, and the maximum number of seconds it is allowed to run.","sidebar":"tutorialSidebar"},"configuration/publishing-config":{"id":"configuration/publishing-config","title":"Publishing Config","description":"This will create a workflows.php configuration file in your config folder.","sidebar":"tutorialSidebar"},"constraints/activity-constraints":{"id":"constraints/activity-constraints","title":"Activity Constraints","description":"Activities have none of the prior constraints. However, because activities are retryable they should still be idempotent. If your activity creates a charge for a customer then retrying it should not create a duplicate charge.","sidebar":"tutorialSidebar"},"constraints/constraints-summary":{"id":"constraints/constraints-summary","title":"Constraints Summary","description":"| Workflows | Activities |","sidebar":"tutorialSidebar"},"constraints/overview":{"id":"constraints/overview","title":"Overview","description":"The determinism and idempotency constraints for workflows and activities are important for ensuring the reliability and correctness of the overall system.","sidebar":"tutorialSidebar"},"constraints/workflow-constraints":{"id":"constraints/workflow-constraints","title":"Workflow Constraints","description":"The determinism constraints for workflow classes dictate that a workflow class must not depend on external state or services that may change over time. This means that a workflow class should not perform any operations that rely on the current date and time, the current user, external network resources, or any other source of potentially changing state.","sidebar":"tutorialSidebar"},"defining-workflows/activities":{"id":"defining-workflows/activities","title":"Activities","description":"An activity is a unit of work that performs a specific task or operation (e.g. making an API request, processing data, sending an email) and can be executed by a workflow.","sidebar":"tutorialSidebar"},"defining-workflows/passing-data":{"id":"defining-workflows/passing-data","title":"Passing Data","description":"You can pass data into a workflow via the start() method.","sidebar":"tutorialSidebar"},"defining-workflows/starting-workflows":{"id":"defining-workflows/starting-workflows","title":"Starting Workflows","description":"To start a workflow, you must first create a workflow instance and then call the start() method on it. The workflow instance has several methods that can be used to interact with the workflow, such as id() to get the workflow\'s unique identifier, status() or running() to get the current status of the workflow, and output() to get the output data produced by the workflow.","sidebar":"tutorialSidebar"},"defining-workflows/workflow-id":{"id":"defining-workflows/workflow-id","title":"Workflow ID","description":"When starting a workflow you can obtain the id like this.","sidebar":"tutorialSidebar"},"defining-workflows/workflow-status":{"id":"defining-workflows/workflow-status","title":"Workflow Status","description":"You can monitor the status of the workflow by calling the running() method, which returns true if the workflow is still running and false if it has completed or failed.","sidebar":"tutorialSidebar"},"defining-workflows/workflows":{"id":"defining-workflows/workflows","title":"Workflows","description":"In Laravel Workflow, workflows and activities are defined as classes that extend the base Workflow and Activity classes provided by the framework. A workflow is a class that defines a sequence of activities that run in parallel, series or a mixture of both.","sidebar":"tutorialSidebar"},"failures-and-recovery":{"id":"failures-and-recovery","title":"Failures and Recovery","description":"Handling Exceptions","sidebar":"tutorialSidebar"},"features/child-workflows":{"id":"features/child-workflows","title":"Child Workflows","description":"It\'s often necessary to break down complex processes into smaller, more manageable units. Child workflows provide a way to encapsulate a sub-process within a parent workflow. This allows you to create hierarchical and modular structures for your workflows, making them more organized and maintainable.","sidebar":"tutorialSidebar"},"features/concurrency":{"id":"features/concurrency","title":"Concurrency","description":"Activities can be executed in series or in parallel. In either case, you start by using ActivityStub::all() method to wait for a group of activities to complete in parallel.","sidebar":"tutorialSidebar"},"features/heartbeats":{"id":"features/heartbeats","title":"Heartbeats","description":"Heartbeats are sent at regular intervals to indicate that an activity is still running and hasn\'t frozen or crashed. They prevent the activity from being terminated due to timing out. This enables long-running activities to have a relatively low timeout. As long as the activity sends a heartbeat faster than the timeout duration, it will not be terminated.","sidebar":"tutorialSidebar"},"features/queries":{"id":"features/queries","title":"Queries","description":"Queries allow you to retrieve information about the current state of a workflow without affecting its execution. This is useful for monitoring and debugging purposes.","sidebar":"tutorialSidebar"},"features/sagas":{"id":"features/sagas","title":"Sagas","description":"Sagas are an established design pattern for managing complex, long-running operations:","sidebar":"tutorialSidebar"},"features/side-effects":{"id":"features/side-effects","title":"Side Effects","description":"A side effect is a closure containing non-deterministic code. The closure is only executed once and the result is saved. It will not execute again if the workflow is retried. Instead, it will return the saved result.","sidebar":"tutorialSidebar"},"features/signal+timer":{"id":"features/signal+timer","title":"Signal + Timer","description":"In some cases, you may want to wait for a signal or for a timer to expire, whichever comes first. This can be achieved by using WorkflowStub::awaitWithTimeout($seconds, $callback).","sidebar":"tutorialSidebar"},"features/signals":{"id":"features/signals","title":"Signals","description":"Signals allow you to trigger events in a workflow from outside the workflow. This can be useful for reacting to external events or for signaling the completion of an external task.","sidebar":"tutorialSidebar"},"features/timers":{"id":"features/timers","title":"Timers","description":"Laravel Workflow provides the ability to suspend the execution of a workflow and resume at a later time. This can be useful for implementing delays, retry logic, or timeouts.","sidebar":"tutorialSidebar"},"how-it-works":{"id":"how-it-works","title":"How It Works","description":"Laravel Workflow is a library that uses Laravel\'s queued jobs and event sourced persistence to create durable coroutines.","sidebar":"tutorialSidebar"},"installation":{"id":"installation","title":"Installation","description":"Requirements","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"What is Laravel Workflow?","sidebar":"tutorialSidebar"},"monitoring":{"id":"monitoring","title":"Monitoring","description":"Waterline","sidebar":"tutorialSidebar"}}}')}}]);