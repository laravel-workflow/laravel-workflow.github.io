"use strict";(self.webpackChunklaravel_workflow=self.webpackChunklaravel_workflow||[]).push([[8432],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>w});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,w=p["".concat(s,".").concat(f)]||p[f]||k[f]||i;return n?o.createElement(w,l(l({ref:t},u),{},{components:n})):o.createElement(w,l({ref:t},u))}));function w(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:r,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:6},l="Testing",a={unversionedId:"testing",id:"testing",title:"Testing",description:"Workflows",source:"@site/docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/testing",draft:!1,editUrl:"https://github.com/laravel-workflow/laravel-workflow.github.io/edit/main/docs/testing.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Failures and Recovery",permalink:"/docs/failures-and-recovery"},next:{title:"Constraints",permalink:"/docs/category/constraints"}},s={},c=[{value:"Workflows",id:"workflows",level:2},{value:"Skipping Time",id:"skipping-time",level:2},{value:"Activities",id:"activities",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing"},"Testing"),(0,r.kt)("h2",{id:"workflows"},"Workflows"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"sync")," driver for testing, you can execute workflows synchronously in your test environment and mock activities to define expected behaviors and outputs without running the actual implementations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\n\nclass MyWorkflow extends Workflow\n{\n    public function execute()\n    {\n        $result = yield ActivityStub::make(MyActivity::class);\n\n        return $result;\n    }\n}\n")),(0,r.kt)("p",null,"The above workflow can be tested by first calling ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowStub::fake()")," and then mocking the activity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public function testWorkflow(): void\n{\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(MyActivity::class, 'result');\n\n    $workflow = WorkflowStub::make(MyWorkflow::class);\n    $workflow->start();\n\n    $this->assertSame($workflow->output(), 'result');\n}\n")),(0,r.kt)("p",null,"You can also provide a callback instead of a result value to ",(0,r.kt)("inlineCode",{parentName:"p"}," WorkflowStub::mock()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public function testWorkflow(): void\n{\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(MyActivity::class, function ($context) {\n        return 'result';\n    });\n\n    $workflow = WorkflowStub::make(MyWorkflow::class);\n    $workflow->start();\n\n    $this->assertSame($workflow->output(), 'result');\n}\n")),(0,r.kt)("p",null,"The workflow ",(0,r.kt)("inlineCode",{parentName:"p"},"$context")," along with any arguments for the current activity will also be passed to the callback."),(0,r.kt)("h2",{id:"skipping-time"},"Skipping Time"),(0,r.kt)("p",null,"By manipulating the system time with ",(0,r.kt)("inlineCode",{parentName:"p"},"Carbon::setTestNow()"),", you can simulate time-dependent workflows. This strategy allows you to test timeouts, delays, and other time-sensitive logic within your workflows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"use Workflow\\ActivityStub;\nuse Workflow\\Workflow;\nuse Workflow\\WorkflowStub;\n\nclass MyTimerWorkflow extends Workflow\n{\n    public function execute()\n    {\n        yield WorkflowStub::timer(60);\n\n        $result = yield ActivityStub::make(MyActivity::class);\n\n        return $result;\n    }\n}\n")),(0,r.kt)("p",null,"The above workflow waits 60 seconds before executing the activity. Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Carbon::setTestNow()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"$workflow->resume()")," allows us to skip this waiting period."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public function testTimeTravelWorkflow(): void\n{\n    $now = Carbon::now();\n    Carbon::setTestNow($now);\n\n    WorkflowStub::fake();\n\n    WorkflowStub::mock(TestActivity::class, 'activity');\n\n    $workflow = WorkflowStub::make(MyTimerWorkflow::class);\n    $workflow->start();\n\n    Carbon::setTestNow($now->copy()->addSeconds(300));\n    $workflow->resume();\n\n    $this->assertSame($workflow->output(), 'activity');\n}\n")),(0,r.kt)("p",null,"Remember to reset the ",(0,r.kt)("inlineCode",{parentName:"p"},"Carbon::setTestNow()")," after each time travel test to avoid side effects on subsequent tests."),(0,r.kt)("h2",{id:"activities"},"Activities"),(0,r.kt)("p",null,"Testing activities is similar to testing Laravel jobs. You manually create the activity and then call the ",(0,r.kt)("inlineCode",{parentName:"p"},"handle()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$workflow = WorkflowStub::make(MyWorkflow::class);\n\n$activity = new MyActivity(0, now()->toDateTimeString(), StoredWorkflow::findOrFail($workflow->id()), []);\n\n$result = $activity->handle();\n")),(0,r.kt)("p",null,"Note that we call the handle method and not the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," method."))}p.isMDXComponent=!0}}]);